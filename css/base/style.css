@charset "UTF-8";
/*------------------------------------*\
    STYLE.CSS
\*------------------------------------*/
/**
 * 
 * sass --watch style.scss:style.min.css --style compressed
 * 
 * Here we pull in some variables, include the inuit.css framework, then add our
 * project-specific components afterwards.
 */
/**
 * Setup
 */
/*------------------------------------*\
    $VARS
\*------------------------------------*/
/**
 * Set up project-specific variables here which are then used throughout your
 * build. These variables are automatically picked up by inuit.css so you should
 * never need to modify any framework code.
 */
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/**
 * Would you like to use Adam Whitcroft’s Batch icon font, as per:
 * adamwhitcroft.com/batch ?
 */
/**
 * Base stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/**
 * Responsiveness?
 */
/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: $responsive parameter above must be enabled before enabling this.
 */
/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */
/**
 * Tell inuit.css when breakpoints start.
 */
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/**
 * English quote marks?
 */
/**
 * If you want English quotes then please do not edit these; they’re only here
 * because Sass needs them.
 */
/**
 * If you need non-English quotes, please alter the following values accordingly:
 */
/**
 * Brand stuff
 */
/**
 * inuit.css will work these next ones out for you.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/*------------------------------------*\
    INUIT.CSS
\*------------------------------------*/
/**
 * 
 * inuitcss.com -- @inuitcss -- @csswizardry
 * 
 */
/**
 * inuit.css acts as a base stylesheet which you should extend with your own
 * theme stylesheet.
 * 
 * inuit.css aims to do the heavy lifting; sorting objects and abstractions,
 * design patterns and fiddly bits of CSS, whilst leaving as much design as
 * possible to you. inuit.css is the scaffolding to your decorator.
 * 
 * This stylesheet is heavily documented and contains lots of comments, please
 * take care to read and refer to them as you build. For further support please
 * tweet at @inuitcss.
 * 
 * Owing to the amount of comments please only ever use minified CSS in
 * production. This file is purely a dev document.
 * 
 * The table of contents below maps to section titles of the same name, to jump
 * to any section simply run a find for $[SECTION-TITLE].
 * 
 * Most objects and abstractions come with a chunk of markup that you should be
 * able to paste into any view to quickly see how the CSS works in conjunction
 * with the correct HTML.
 * 
 * inuit.css is written to this standard: github.com/csswizardry/CSS-Guidelines
 * 
 * LICENSE
 * 
 * Copyright 2012 Harry Roberts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Thank you for choosing inuit.css. May your floats remain cleared.
 */
/*------------------------------------*\
    $CONTENTS
\*------------------------------------*/
/**
 * CONTENTS............You’re reading it!
 * WARNING.............Here be dragons!
 * IMPORTS.............Begin importing the sections below
 * 
 * MIXINS..............Super-simple Sass stuff
 * NORMALIZE...........normalize.css
 * RESET...............Set some defaults
 * CLEARFIX............
 * SHARED..............Shared declarations
 * 
 * MAIN................High-level elements like `html`, `body`, etc.
 * HEADINGS............Double-stranded heading hierarchy
 * PARAGRAPHS..........
 * SMALLPRINT..........Smaller text elements like `small`
 * QUOTES..............
 * CODE................
 * LINKS...............
 * LISTS...............
 * IMAGES..............
 * TABLES..............
 * FORMS...............
 * 
 * GRIDS...............Fluid, proportional and nestable grids
 * FLEXBOX.............Crudely emulate flexbox
 * COLUMNS.............CSS3 columns
 * NAV.................A simple abstraction to put a list in horizontal nav mode
 * OPTIONS.............Grouped nav items
 * PAGINATION..........Very stripped back, basic paginator
 * BREADCRUMB..........Simple breadcrumb trail object
 * MEDIA...............Media object
 * MARGINALIA..........Simple marginalia content
 * ISLAND..............Boxed off content
 * BLOCK-LIST..........Blocky lists of content
 * MATRIX..............Gridded lists
 * SPLIT...............A simple split-in-two object
 * THIS-OR-THIS........Options object
 * LINK-COMPLEX........
 * FLYOUT..............Flyout-on-hover object
 * ARROWS..............CSS arrows
 * SPRITE..............Generic spriting element
 * ICON-TEXT...........Icon and text couplings
 * BUTTONS.............
 * LOZENGES............Basic lozenge styles
 * RULES...............Horizontal rules
 * STATS...............Simple stats object
 * GREYBOX.............Wireframing styles
 * BATCH...............Batch icon font
 * 
 * WIDTHS..............Width classes for use alongside the grid system etc.
 * PUSH................Push classes for manipulating grids
 * PULL................Pull classes for manipulating grids
 * BRAND...............Helper class to apply brand treatment to elements
 * HELPER..............A series of helper classes to use arbitrarily
 * DEBUG...............Enable to add visual flags for debugging purposes
 */
/*------------------------------------*\
    $WARNING
\*------------------------------------*/
/*
 * inuit.css, being an OO framework, works in keeping with the open/closed
 * principle. The variables you set previously are now being used throughout
 * inuit.css to style everything we need for a base. Any custom styles SHOULD
 * NOT be added or modified in inuit.css directly, but added via your theme
 * stylesheet as per the open/closed principle:
 * 
 * csswizardry.com/2012/06/the-open-closed-principle-applied-to-css
 * 
 * Try not to edit any CSS beyond this point; if you find you need to do so
 * it is a failing of the framework so please tweet at @inuitcss.
 */
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/**
 * Generic utility styles etc.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 * 
   `@include font-size(10px);`
 * 
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 * 
   `@include vendor(border-radius, 4px);`
 * 
 */
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 * 
   .foo{
       @include vendor(animation, shrink 3s);
   }
   
   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 * 
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 * 
   `@include truncate(100%);`
 * 
 * Where `$truncation-boundary` is a united measurement.
 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 * 
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 * 
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 * 
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 * 
 * `@include arrow(top, left, red)`
 * 
 * for just a single, red arrow, or:
 * 
 * `@include arrow(bottom, center, red, black)`
 * 
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus: 
 * 
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 * 
 */
/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 * 
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 * 
 * Not using a media query will, naturally, serve styles to all devices.
 * 
 * `@include media-query(palm){ [styles here] }`
 * 
 * We work out your end points for you:
 */
/* normalize.css v2.1.0 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/*
 * Correct `block` display not defined in IE 8/9.
 */
/* line 22, ../../sass/base/inuit.css/generic/_normalize.scss */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/*
 * Correct `inline-block` display not defined in IE 8/9.
 */
/* line 32, ../../sass/base/inuit.css/generic/_normalize.scss */
audio,
canvas,
video {
  display: inline-block;
}

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
/* line 41, ../../sass/base/inuit.css/generic/_normalize.scss */
audio:not([controls]) {
  display: none;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
/* line 50, ../../sass/base/inuit.css/generic/_normalize.scss */
[hidden] {
  display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */
/*
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
/* line 64, ../../sass/base/inuit.css/generic/_normalize.scss */
html {
  font-family: sans-serif;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */
}

/*
 * Remove default margin.
 */
/* line 74, ../../sass/base/inuit.css/generic/_normalize.scss */
body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */
/*
 * Address `outline` inconsistency between Chrome and other browsers.
 */
/* line 86, ../../sass/base/inuit.css/generic/_normalize.scss */
a:focus {
  outline: thin dotted;
}

/*
 * Improve readability when focused and also mouse hovered in all browsers.
 */
/* line 95, ../../sass/base/inuit.css/generic/_normalize.scss */
a:active,
a:hover {
  outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */
/*
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
/* line 108, ../../sass/base/inuit.css/generic/_normalize.scss */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/*
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
/* line 117, ../../sass/base/inuit.css/generic/_normalize.scss */
abbr[title] {
  border-bottom: 1px dotted;
}

/*
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
/* line 126, ../../sass/base/inuit.css/generic/_normalize.scss */
b,
strong {
  font-weight: bold;
}

/*
 * Address styling not present in Safari 5 and Chrome.
 */
/* line 134, ../../sass/base/inuit.css/generic/_normalize.scss */
dfn {
  font-style: italic;
}

/*
 * Address differences between Firefox and other browsers.
 */
/* line 142, ../../sass/base/inuit.css/generic/_normalize.scss */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
/* line 152, ../../sass/base/inuit.css/generic/_normalize.scss */
mark {
  background: #ff0;
  color: #000;
}

/*
 * Correct font family set oddly in Safari 5 and Chrome.
 */
/* line 164, ../../sass/base/inuit.css/generic/_normalize.scss */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}

/*
 * Improve readability of pre-formatted text in all browsers.
 */
/* line 173, ../../sass/base/inuit.css/generic/_normalize.scss */
pre {
  white-space: pre-wrap;
}

/*
 * Set consistent quote types.
 */
/* line 181, ../../sass/base/inuit.css/generic/_normalize.scss */
q {
  quotes: "\201C" "\201D" "\2018" "\2019";
}

/*
 * Address inconsistent and variable font size in all browsers.
 */
/* line 189, ../../sass/base/inuit.css/generic/_normalize.scss */
small {
  font-size: 80%;
}

/*
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
/* line 198, ../../sass/base/inuit.css/generic/_normalize.scss */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

/* line 205, ../../sass/base/inuit.css/generic/_normalize.scss */
sup {
  top: -0.5em;
}

/* line 209, ../../sass/base/inuit.css/generic/_normalize.scss */
sub {
  bottom: -0.25em;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */
/*
 * Remove border when inside `a` element in IE 8/9.
 */
/* line 221, ../../sass/base/inuit.css/generic/_normalize.scss */
img {
  border: 0;
}

/*
 * Correct overflow displayed oddly in IE 9.
 */
/* line 229, ../../sass/base/inuit.css/generic/_normalize.scss */
svg:not(:root) {
  overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */
/*
 * Address margin not present in IE 8/9 and Safari 5.
 */
/* line 241, ../../sass/base/inuit.css/generic/_normalize.scss */
figure {
  margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */
/*
 * Define consistent border, margin, and padding.
 */
/* line 253, ../../sass/base/inuit.css/generic/_normalize.scss */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
/* line 264, ../../sass/base/inuit.css/generic/_normalize.scss */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
/* line 278, ../../sass/base/inuit.css/generic/_normalize.scss */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
}

/*
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
/* line 290, ../../sass/base/inuit.css/generic/_normalize.scss */
button,
input {
  line-height: normal;
}

/*
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
/* line 302, ../../sass/base/inuit.css/generic/_normalize.scss */
button,
select {
  text-transform: none;
}

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
/* line 317, ../../sass/base/inuit.css/generic/_normalize.scss */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/*
 * Re-set default cursor for disabled elements.
 */
/* line 327, ../../sass/base/inuit.css/generic/_normalize.scss */
button[disabled],
html input[disabled] {
  cursor: default;
}

/*
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
/* line 337, ../../sass/base/inuit.css/generic/_normalize.scss */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
/* line 348, ../../sass/base/inuit.css/generic/_normalize.scss */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box;
}

/*
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
/* line 361, ../../sass/base/inuit.css/generic/_normalize.scss */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
 * Remove inner padding and border in Firefox 4+.
 */
/* line 370, ../../sass/base/inuit.css/generic/_normalize.scss */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/*
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
/* line 380, ../../sass/base/inuit.css/generic/_normalize.scss */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */
/*
 * Remove most spacing between table cells.
 */
/* line 393, ../../sass/base/inuit.css/generic/_normalize.scss */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*------------------------------------*\
    $RESET
\*------------------------------------*/
/**
 * A more considered reset; more of a restart... 
 * As per: csswizardry.com/2011/10/reset-restarted
 */
/**
* Let’s make the box model all nice, shall we…?
*/
/* line 16, ../../sass/base/inuit.css/generic/_reset.scss */
*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
}

/**
 * The usual...
 */
/* line 30, ../../sass/base/inuit.css/generic/_reset.scss */
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0;
}

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
/* line 38, ../../sass/base/inuit.css/generic/_reset.scss */
abbr[title], dfn[title] {
  cursor: help;
}

/**
 * Remove underlines from potentially troublesome elements.
 */
/* line 45, ../../sass/base/inuit.css/generic/_reset.scss */
a, u, ins {
  text-decoration: none;
}

/**
 * Apply faux underline via `border-bottom`.
 */
/* line 52, ../../sass/base/inuit.css/generic/_reset.scss */
ins {
  border-bottom: 1px solid;
}

/**
 * So that `alt` text is visually offset if images don’t load.
 */
/* line 59, ../../sass/base/inuit.css/generic/_reset.scss */
img {
  font-style: italic;
}

/**
 * Give form elements some cursor interactions...
 */
/* line 71, ../../sass/base/inuit.css/generic/_reset.scss */
label,
input,
textarea,
button,
select,
option {
  cursor: pointer;
}

/* line 77, ../../sass/base/inuit.css/generic/_reset.scss */
.text-input:active,
.text-input:focus,
textarea:active,
textarea:focus {
  cursor: text;
  outline: none;
}

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
/* line 10, ../../sass/base/inuit.css/generic/_clearfix.scss */
.cf:after, .gw:after,
.grid-wrapper:after, .nav:after, .media:after, .island:after,
.islet:after, .matrix:after, .multi-list:after, .stat-group:after {
  content: "";
  display: table;
  clear: both;
}

/*------------------------------------*\
    $SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
/**
 * Base elements
 */
/* line 24, ../../sass/base/inuit.css/generic/_shared.scss */
h1, h2, h3, h4, h5, h6, hgroup,
ul, ol, dl,
blockquote, p, address,
table,
fieldset, figure,
pre,
.form-fields > li,
.media,
.island,
.islet {
  margin-bottom: 24px;
  margin-bottom: 1.5rem;
}
/* line 28, ../../sass/base/inuit.css/generic/_shared.scss */
.islet h1, .islet h2, .islet h3, .islet h4, .islet h5, .islet h6, .islet hgroup, .islet
ul, .islet ol, .islet dl, .islet
blockquote, .islet p, .islet address, .islet
table, .islet
fieldset, .islet figure, .islet
pre, .islet .form-fields > li, .islet
.media, .islet
.island, .islet
.islet {
  margin-bottom: 12px;
  margin-bottom: 0.75rem;
}

/**
 * Doubled up `margin-bottom` helper class.
 */
/* line 38, ../../sass/base/inuit.css/generic/_shared.scss */
.landmark {
  margin-bottom: 48px;
  margin-bottom: 3rem;
}

/**
 * `hr` elements only take up a few pixels, so we need to give them special
 * treatment regarding vertical rhythm.
 */
/* line 48, ../../sass/base/inuit.css/generic/_shared.scss */
hr {
  margin-bottom: 22px;
  margin-bottom: 1.375rem;
}

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
/* line 58, ../../sass/base/inuit.css/generic/_shared.scss */
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem;
}

/**
 * Base styles; unclassed HTML elements etc.
 */
/*------------------------------------*\
    $MAIN
\*------------------------------------*/
/* line 4, ../../sass/base/inuit.css/base/_main.scss */
html {
  font: 1em/1.5 serif;
  overflow-y: scroll;
  min-height: 100%;
}

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/
/**
 * As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 * 
 * When we define a heading we also define a corresponding class to go with it.
 * This allows us to apply, say, `class=alpha` to a `h3`; a double-stranded
 * heading hierarchy.
 */
/* line 11, ../../sass/base/inuit.css/base/_headings.scss */
h1, .alpha {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333;
}

/* line 14, ../../sass/base/inuit.css/base/_headings.scss */
h2, .beta {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6;
}

/* line 17, ../../sass/base/inuit.css/base/_headings.scss */
h3, .gamma {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1;
}

/* line 20, ../../sass/base/inuit.css/base/_headings.scss */
h4, .delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2;
}

/* line 23, ../../sass/base/inuit.css/base/_headings.scss */
h5, .epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
}

/* line 26, ../../sass/base/inuit.css/base/_headings.scss */
h6, .zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
}

/**
 * Heading groups and generic any-heading class.
 * To target any heading of any level simply apply a class of `.hN`, e.g.:
 * 
   <hgroup>
       <h1 class=hN>inuit.css</h1>
       <h2 class=hN>Best. Framework. Ever!</h2>
   </hgroup>
 * 
 */
/* line 43, ../../sass/base/inuit.css/base/_headings.scss */
hgroup .hN {
  margin-bottom: 0;
}

/**
 * A series of classes for setting massive type; for use in heroes, mastheads,
 * promos, etc.
 */
/* line 52, ../../sass/base/inuit.css/base/_headings.scss */
.giga {
  font-size: 96px;
  font-size: 6rem;
  line-height: 1;
}

/* line 55, ../../sass/base/inuit.css/base/_headings.scss */
.mega {
  font-size: 72px;
  font-size: 4.5rem;
  line-height: 1;
}

/* line 58, ../../sass/base/inuit.css/base/_headings.scss */
.kilo {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1;
}

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */
/* line 9, ../../sass/base/inuit.css/base/_paragraphs.scss */
.lede,
.lead {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333;
}

/*------------------------------------*\
    $SMALLPRINT
\*------------------------------------*/
/**
 * A series of classes for setting tiny type; for use in smallprint etc.
 */
/* line 8, ../../sass/base/inuit.css/base/_smallprint.scss */
.smallprint,
.milli {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
}

/* line 11, ../../sass/base/inuit.css/base/_smallprint.scss */
.micro {
  font-size: 10px;
  font-size: 0.625rem;
  line-height: 2.4;
}

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * If English quotes are set in `_vars.scss`, define them here.
 */
/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */
/**
 * Inline quotes.
 */
/* line 20, ../../sass/base/inuit.css/base/_quotes.scss */
q {
  quotes: "‘" "’" "“" "”";
}
/* line 23, ../../sass/base/inuit.css/base/_quotes.scss */
q:before {
  content: "‘";
  content: open-quote;
}
/* line 27, ../../sass/base/inuit.css/base/_quotes.scss */
q:after {
  content: "’";
  content: close-quote;
}
/* line 32, ../../sass/base/inuit.css/base/_quotes.scss */
q q:before {
  content: "“";
  content: open-quote;
}
/* line 36, ../../sass/base/inuit.css/base/_quotes.scss */
q q:after {
  content: "”";
  content: close-quote;
}

/* line 42, ../../sass/base/inuit.css/base/_quotes.scss */
blockquote {
  quotes: "“" "”";
}
/* line 45, ../../sass/base/inuit.css/base/_quotes.scss */
blockquote p:before {
  content: "“";
  content: open-quote;
}
/* line 49, ../../sass/base/inuit.css/base/_quotes.scss */
blockquote p:after {
  content: "";
  content: no-close-quote;
}
/* line 53, ../../sass/base/inuit.css/base/_quotes.scss */
blockquote p:last-of-type:after {
  content: "”";
  content: close-quote;
}
/* line 58, ../../sass/base/inuit.css/base/_quotes.scss */
blockquote q:before {
  content: "‘";
  content: open-quote;
}
/* line 62, ../../sass/base/inuit.css/base/_quotes.scss */
blockquote q:after {
  content: "’";
  content: close-quote;
}

/**
 * 
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 * 
 */
/* line 78, ../../sass/base/inuit.css/base/_quotes.scss */
blockquote {
  /**
   * .4em is roughly equal to the width of the opening “ that we wish to hang.
   */
  text-indent: -0.41em;
}
/* line 84, ../../sass/base/inuit.css/base/_quotes.scss */
blockquote p:last-of-type {
  margin-bottom: 0;
}

/* line 89, ../../sass/base/inuit.css/base/_quotes.scss */
.source {
  display: block;
  text-indent: 0;
}
/* line 93, ../../sass/base/inuit.css/base/_quotes.scss */
.source:before {
  content: "—";
}

/*------------------------------------*\
    $CODE
\*------------------------------------*/
/**
 * Use an explicit font stack to ensure browsers render correct `line-height`.
 */
/* line 7, ../../sass/base/inuit.css/base/_code.scss */
pre {
  overflow: auto;
}

/* line 10, ../../sass/base/inuit.css/base/_code.scss */
pre mark {
  background: none;
  border-bottom: 1px solid;
  color: inherit;
}

/**
 * Add comments to your code examples, e.g.:
 * 
   <code>&lt;/div&gt;<span class=code-comment>&lt;!-- /wrapper --&gt;</span></code>
 * 
 */
/* line 23, ../../sass/base/inuit.css/base/_code.scss */
.code-comment {
  /**
   * Override this setting in your theme stylesheet
   */
  opacity: 0.75;
  filter: alpha(opacity=75);
}

/**
 * You can add line numbers to your code examples but be warned, it requires
 * some pretty funky looking markup, e.g.:
 * 
   <ol class=line-numbers>
       <li><code>.nav{</code></li>
       <li><code>    list-style:none;</code></li>
       <li><code>    margin-left:0;</code></li>
       <li><code>}</code></li>
       <li><code>    .nav > li,</code></li>
       <li><code>        .nav > li > a{</code></li>
       <li><code>            display:inline-block;</code></li>
       <li><code>           *display:inline-block;</code></li>
       <li><code>            zoom:1;</code></li>
       <li><code>        }</code></li>
   </ol>
 * 
 * 1. Make the list look like code.
 * 2. Give the list flush numbers with a leading zero.
 * 3. Make sure lines of code don’t wrap.
 * 4. Give the code form by forcing the `code` to honour white-space.
 */
/* line 54, ../../sass/base/inuit.css/base/_code.scss */
.line-numbers {
  font-family: monospace, serif;
  /* [1] */
  list-style: decimal-leading-zero inside;
  /* [2] */
  white-space: nowrap;
  /* [3] */
  overflow: auto;
  /* [3] */
  margin-left: 0;
}

/* line 61, ../../sass/base/inuit.css/base/_code.scss */
.line-numbers code {
  white-space: pre;
  /* [4] */
}

/*------------------------------------*\
    $LINKS
\*------------------------------------*/
/**
 * Say no to negative hovers, as per: csswizardry.com/2011/05/on-negative-hovers
 *
 * Sometimes, particularly on larger projects, it is useful to scope link
 * styling only to anchors which have `href` attributes.
 */
/* line 10, ../../sass/base/inuit.css/base/_links.scss */
a {
  /**
   * Set colors etc in your theme stylesheet.
   */
}
/* line 17, ../../sass/base/inuit.css/base/_links.scss */
a:hover, a:active, a:focus {
  text-decoration: underline;
}

/**
 * ‘Current’ states, e.g.:
 * 
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li class=current><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
/* line 34, ../../sass/base/inuit.css/base/_links.scss */
.current > a {
  cursor: text;
  text-decoration: underline;
}

/*------------------------------------*\
    $IMAGES
\*------------------------------------*/
/**
 * Demo: jsfiddle.net/inuitcss/yMtur
 */
/**
 * Fluid images.
 */
/* line 10, ../../sass/base/inuit.css/base/_images.scss */
img {
  max-width: 100%;
}

/**
 * Non-fluid images if you specify `width` and/or `height` attributes.
 */
/* line 19, ../../sass/base/inuit.css/base/_images.scss */
img[width],
img[height] {
  max-width: none;
}

/**
 * Image placement variations.
 */
/* line 27, ../../sass/base/inuit.css/base/_images.scss */
.img--right {
  float: right;
  margin-bottom: 24px;
  margin-left: 24px;
}

/* line 32, ../../sass/base/inuit.css/base/_images.scss */
.img--left {
  float: left;
  margin-right: 24px;
  margin-bottom: 24px;
}

/* line 37, ../../sass/base/inuit.css/base/_images.scss */
.img--center {
  display: block;
  margin-right: auto;
  margin-bottom: 24px;
  margin-left: auto;
}

/**
 * Keep your images on your baseline.
 * 
 * Please note, these will not work too nicely with fluid images and will
 * distort when resized below a certain width. Use with caution.
 */
/* line 51, ../../sass/base/inuit.css/base/_images.scss */
.img--short {
  height: 120px;
}

/* line 54, ../../sass/base/inuit.css/base/_images.scss */
.img--medium {
  height: 240px;
}

/* line 57, ../../sass/base/inuit.css/base/_images.scss */
.img--tall {
  height: 360px;
}

/**
 * Images in `figure` elements.
 */
/* line 65, ../../sass/base/inuit.css/base/_images.scss */
figure > img {
  display: block;
}

/*------------------------------------*\
    $LISTS
\*------------------------------------*/
/**
 * Remove vertical spacing from nested lists.
 */
/* line 9, ../../sass/base/inuit.css/base/_lists.scss */
li > ul,
li > ol {
  margin-bottom: 0;
}

/**
 * Have a numbered `ul` without the semantics implied by using an `ol`.
 */
/*ul*/
/* line 17, ../../sass/base/inuit.css/base/_lists.scss */
.numbered-list {
  list-style-type: decimal;
}

/*------------------------------------*\
    $TABLES
\*------------------------------------*/
/**
 * We have a lot at our disposal for making very complex table constructs, e.g.:
 *
   <table class="table--bordered  table--striped  table--data">
       <colgroup>
           <col class=t10>
           <col class=t10>
           <col class=t10>
           <col>
       </colgroup>
       <thead>
           <tr>
               <th colspan=3>Foo</th>
               <th>Bar</th>
           </tr>
           <tr>
               <th>Lorem</th>
               <th>Ipsum</th>
               <th class=numerical>Dolor</th>
               <th>Sit</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <th rowspan=3>Sit</th>
               <td>Dolor</td>
               <td class=numerical>03.788</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>32.210</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>47.797</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <th rowspan=2>Sit</th>
               <td>Dolor</td>
               <td class=numerical>09.640</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>12.117</td>
               <td>Lorem</td>
           </tr>
       </tbody>
   </table>
 *
 */
/* line 58, ../../sass/base/inuit.css/base/_tables.scss */
table {
  width: 100%;
}

/* line 62, ../../sass/base/inuit.css/base/_tables.scss */
th,
td {
  padding: 6px;
  text-align: left;
}
@media screen and (min-width: 480px) {
  /* line 62, ../../sass/base/inuit.css/base/_tables.scss */
  th,
  td {
    padding: 12px;
  }
}

/**
 * Cell alignments
 */
/* line 74, ../../sass/base/inuit.css/base/_tables.scss */
[colspan] {
  text-align: center;
}

/* line 77, ../../sass/base/inuit.css/base/_tables.scss */
[colspan="1"] {
  text-align: left;
}

/* line 80, ../../sass/base/inuit.css/base/_tables.scss */
[rowspan] {
  vertical-align: middle;
}

/* line 83, ../../sass/base/inuit.css/base/_tables.scss */
[rowspan="1"] {
  vertical-align: top;
}

/* line 86, ../../sass/base/inuit.css/base/_tables.scss */
.numerical {
  text-align: right;
}

/**
 * In the HTML above we see several `col` elements with classes whose numbers
 * represent a percentage width for that column. We leave one column free of a
 * class so that column can soak up the effects of any accidental breakage in
 * the table.
 */
/* line 96, ../../sass/base/inuit.css/base/_tables.scss */
.t5 {
  width: 5%;
}

/* line 97, ../../sass/base/inuit.css/base/_tables.scss */
.t10 {
  width: 10%;
}

/* line 98, ../../sass/base/inuit.css/base/_tables.scss */
.t12 {
  width: 12.5%;
}

/* 1/8 */
/* line 99, ../../sass/base/inuit.css/base/_tables.scss */
.t15 {
  width: 15%;
}

/* line 100, ../../sass/base/inuit.css/base/_tables.scss */
.t20 {
  width: 20%;
}

/* line 101, ../../sass/base/inuit.css/base/_tables.scss */
.t25 {
  width: 25%;
}

/* 1/4 */
/* line 102, ../../sass/base/inuit.css/base/_tables.scss */
.t30 {
  width: 30%;
}

/* line 103, ../../sass/base/inuit.css/base/_tables.scss */
.t33 {
  width: 33.333%;
}

/* 1/3 */
/* line 104, ../../sass/base/inuit.css/base/_tables.scss */
.t35 {
  width: 35%;
}

/* line 105, ../../sass/base/inuit.css/base/_tables.scss */
.t37 {
  width: 37.5%;
}

/* 3/8 */
/* line 106, ../../sass/base/inuit.css/base/_tables.scss */
.t40 {
  width: 40%;
}

/* line 107, ../../sass/base/inuit.css/base/_tables.scss */
.t45 {
  width: 45%;
}

/* line 108, ../../sass/base/inuit.css/base/_tables.scss */
.t50 {
  width: 50%;
}

/* 1/2 */
/* line 109, ../../sass/base/inuit.css/base/_tables.scss */
.t55 {
  width: 55%;
}

/* line 110, ../../sass/base/inuit.css/base/_tables.scss */
.t60 {
  width: 60%;
}

/* line 111, ../../sass/base/inuit.css/base/_tables.scss */
.t62 {
  width: 62.5%;
}

/* 5/8 */
/* line 112, ../../sass/base/inuit.css/base/_tables.scss */
.t65 {
  width: 65%;
}

/* line 113, ../../sass/base/inuit.css/base/_tables.scss */
.t66 {
  width: 66.666%;
}

/* 2/3 */
/* line 114, ../../sass/base/inuit.css/base/_tables.scss */
.t70 {
  width: 70%;
}

/* line 115, ../../sass/base/inuit.css/base/_tables.scss */
.t75 {
  width: 75%;
}

/* 3/4*/
/* line 116, ../../sass/base/inuit.css/base/_tables.scss */
.t80 {
  width: 80%;
}

/* line 117, ../../sass/base/inuit.css/base/_tables.scss */
.t85 {
  width: 85%;
}

/* line 118, ../../sass/base/inuit.css/base/_tables.scss */
.t87 {
  width: 87.5%;
}

/* 7/8 */
/* line 119, ../../sass/base/inuit.css/base/_tables.scss */
.t90 {
  width: 90%;
}

/* line 120, ../../sass/base/inuit.css/base/_tables.scss */
.t95 {
  width: 95%;
}

/**
 * Bordered tables
 */
/* line 129, ../../sass/base/inuit.css/base/_tables.scss */
.table--bordered th,
.table--bordered td {
  border: 1px solid #ccc;
  /* Override this color in your theme stylesheet */
}
/* line 132, ../../sass/base/inuit.css/base/_tables.scss */
.table--bordered th:empty,
.table--bordered td:empty {
  border: none;
}
/* line 137, ../../sass/base/inuit.css/base/_tables.scss */
.table--bordered thead tr:last-child th {
  border-bottom-width: 2px;
}
/* line 141, ../../sass/base/inuit.css/base/_tables.scss */
.table--bordered tbody tr th:last-of-type {
  border-right-width: 2px;
}

/**
 * Striped tables
 */
/* line 152, ../../sass/base/inuit.css/base/_tables.scss */
.table--striped tbody tr:nth-of-type(odd) {
  background-color: #ffc;
  /* Override this color in your theme stylesheet */
}

/**
 * Data table
 */
/* line 161, ../../sass/base/inuit.css/base/_tables.scss */
.table--data {
  font: 12px/1.5 sans-serif;
}

/*------------------------------------*\
    $FORMS
\*------------------------------------*/
/**
 * 
 * Demo: jsfiddle.net/inuitcss/MhHHU
 * 
 */
/* line 9, ../../sass/base/inuit.css/base/_forms.scss */
fieldset {
  padding: 24px;
}

/**
 * Text inputs
 * 
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 * 
 */
/* line 25, ../../sass/base/inuit.css/base/_forms.scss */
.text-input,
textarea {
  /**
   * Style these via your theme stylesheet.
   */
}

/**
 * Group sets of form fields in a list, e.g.:
 * 
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 * 
 */
/* line 51, ../../sass/base/inuit.css/base/_forms.scss */
.form-fields {
  list-style: none;
  margin: 0;
}

/* line 58, ../../sass/base/inuit.css/base/_forms.scss */
.form-fields > li:last-child {
  margin-bottom: 0;
}

/**
 * Labels
 * 
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 * 
   <li>
       <span class=label>Select an option below:</span>
       <ul class="multi-list  four-cols">
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 * 
 */
/* line 90, ../../sass/base/inuit.css/base/_forms.scss */
label,
.label {
  display: block;
}

/**
 * Extra help text in `label`s, e.g.:
 * 
   <label>Card number <small class=additional>No spaces</small></label>
 * 
 */
/* line 99, ../../sass/base/inuit.css/base/_forms.scss */
.additional {
  display: block;
  font-weight: normal;
}

/*
 * Groups of checkboxes and radios, e.g.:
 * 
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 * 
 */
/* line 120, ../../sass/base/inuit.css/base/_forms.scss */
.check-list {
  list-style: none;
  margin: 0;
}

/*
 * Labels in check-lists
 */
/* line 129, ../../sass/base/inuit.css/base/_forms.scss */
.check-label,
.check-list label,
.check-list .label {
  display: inline-block;
}

/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 * 
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 * 
 */
/* line 149, ../../sass/base/inuit.css/base/_forms.scss */
.spoken-form label {
  display: inline-block;
  font: inherit;
}

/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 * 
   <label for=email>Email:</label>
   <input type=email class=text-input id=email> 
   <small class=extra-help>.edu emails only</small>
 * 
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it won’t interfere with anything once
 * it reappears.
 * 
 */
/*small*/
/* line 167, ../../sass/base/inuit.css/base/_forms.scss */
.extra-help {
  display: inline-block;
  visibility: hidden;
}

/* line 172, ../../sass/base/inuit.css/base/_forms.scss */
.text-input:active + .extra-help,
.text-input:focus + .extra-help {
  visibility: visible;
}

/**
 * Objects and abstractions
 * 
 * Single-line comment (//) out any objects you do not need in your project.
 */
/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 * 
   <div class=gw>
       
       <div class="g  one-third">
           <p>One third grid</p>
       </div>
       
       <div class="g  two-thirds">
           <p>Two thirds grid</p>
       </div>
       
       <div class="g  one-half">
           <p>One half grid</p>
       </div>
       
       <div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>
       
       <div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>
       
   </div>
 * 
 * Demo: jsfiddle.net/inuitcss/CLYUC
 * 
 */
/**
 * Grid wrapper
 * 
 * Shorthand and verbose
 */
/* line 42, ../../sass/base/inuit.css/objects/_grids.scss */
.gw,
.grid-wrapper {
  /**
   * Negative margin to negate the padding on the first grid child. 
   */
  margin-left: -24px;
  /**
   * The following declarations allow us to use the `.gw` class on lists.
   */
  list-style: none;
  margin-bottom: 0;
}

/**
 * Reverse grid order
 * 
   <div class="gw  gw--rev">
       
       <div class="g  one-third">
           <p>Appears on the right</p>
       </div>
       
       <div class="g  two-thirds">
           <p>Appears on the left</p>
       </div>
       
   </div>
 * 
 */
/* line 73, ../../sass/base/inuit.css/objects/_grids.scss */
.gw--rev > .g,
.grid-wrapper--rev > .grid {
  float: right;
}

/**
 * Very infrequently occuring grid wrappers as children of grid wrappers.
 */
/* line 82, ../../sass/base/inuit.css/objects/_grids.scss */
.gw > .gw,
.grid-wrapper > .grid-wrapper {
  margin-left: 0;
}

/**
 * Grid
 * 
 * Shorthand and verbose
 */
/* line 93, ../../sass/base/inuit.css/objects/_grids.scss */
.g,
.grid {
  float: left;
  padding-left: 24px;
}

/*------------------------------------*\
    $FLEXBOX
\*------------------------------------*/
/**
 * Until we can utilise flexbox natively we can kinda, sorta, attempt to emulate
 * it, in a way... e.g.:
 * 
   <header class=flexbox>
       
       <div class=flexbox__item>
           <b>Welcome to</b>
       </div>
       
       <div class=flexbox__item>
           <img src="//csswizardry.com/inuitcss/img/logo.jpg" alt="inuit.css">
       </div>
   
   </header>
 * 
 * We can also combine our grid system classes with `.flexbox__item` classes,
 * e.g.:
 * 
   <div class=flexbox>
       <div class="flexbox__item  one-quarter">
       </div>
       <div class="flexbox__item  three-quarters">
       </div>
   </div>
 * 
 * It’s pretty poorly named I’m afraid, but it works…
 * 
 * Demo: jsfiddle.net/inuitcss/ufUh2
 * 
 */
/* line 35, ../../sass/base/inuit.css/objects/_flexbox.scss */
.flexbox {
  display: table;
  width: 100%;
}

/**
 * Nasty hack to circumvent Modernizr conflicts.
 */
/* line 43, ../../sass/base/inuit.css/objects/_flexbox.scss */
html.flexbox {
  display: block;
  width: auto;
}

/* line 48, ../../sass/base/inuit.css/objects/_flexbox.scss */
.flexbox__item {
  display: table-cell;
  vertical-align: middle;
}

/*------------------------------------*\
    $COLUMNS
\*------------------------------------*/
/**
 * Here we can set elements in columns of text using CSS3, e.g.:
 * 
   <p class=text-cols--2>
 * 
 * Demo: jsfiddle.net/inuitcss/E26Yd
 * 
 */
/* line 12, ../../sass/base/inuit.css/objects/_columns.scss */
.text-cols--2, .text-cols--3, .text-cols--4, .text-cols--5 {
  -webkit-column-gap: 24px;
  -moz-column-gap: 24px;
  -ms-column-gap: 24px;
  -o-column-gap: 24px;
  column-gap: 24px;
}

/* line 15, ../../sass/base/inuit.css/objects/_columns.scss */
.text-cols--2 {
  -webkit-column-count: 2;
  -moz-column-count: 2;
  -ms-column-count: 2;
  -o-column-count: 2;
  column-count: 2;
}

/* line 16, ../../sass/base/inuit.css/objects/_columns.scss */
.text-cols--3 {
  -webkit-column-count: 3;
  -moz-column-count: 3;
  -ms-column-count: 3;
  -o-column-count: 3;
  column-count: 3;
}

/* line 17, ../../sass/base/inuit.css/objects/_columns.scss */
.text-cols--4 {
  -webkit-column-count: 4;
  -moz-column-count: 4;
  -ms-column-count: 4;
  -o-column-count: 4;
  column-count: 4;
}

/* line 18, ../../sass/base/inuit.css/objects/_columns.scss */
.text-cols--5 {
  -webkit-column-count: 5;
  -moz-column-count: 5;
  -ms-column-count: 5;
  -o-column-count: 5;
  column-count: 5;
}

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
 * e.g.:
 * 
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 * Demo: jsfiddle.net/inuitcss/Vnph4
 * 
 */
/* line 19, ../../sass/base/inuit.css/objects/_nav.scss */
.nav {
  list-style: none;
  margin-left: 0;
}
/* line 27, ../../sass/base/inuit.css/objects/_nav.scss */
.nav > li,
.nav > li > a {
  display: inline-block;
  *display: inline;
  zoom: 1;
}

/**
 * `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:
 * 
   <ul class="nav  nav--stacked">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
/* line 49, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--stacked > li {
  display: list-item;
}
/* line 52, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--stacked > li > a {
  display: block;
}

/**
 * `.nav--banner` extends `.nav` and centres the list, e.g.:
 * 
   <ul class="nav  nav--banner">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
/* line 70, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--banner {
  text-align: center;
}

/**
 * Give nav links a big, blocky hit area. Extends `.nav`, e.g.:
 * 
   <ul class="nav  nav--block">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
/* line 86, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--block, .options {
  line-height: 1;
  /**
   * Remove whitespace caused by `inline-block`.
   */
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
  white-space: nowrap;
}
/* line 95, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--block > li, .options > li {
  letter-spacing: normal;
  word-spacing: normal;
}
/* line 99, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--block > li > a, .options > li > a {
  padding: 12px;
}

/**
 * Force a nav to occupy 100% of the available width of its parent. Extends
 * `.nav`, e.g.:
 * 
   <ul class="nav  nav--fit">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 * Thanks to @pimpl for this idea!
 */
/* line 119, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--fit {
  display: table;
  width: 100%;
}
/* line 123, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--fit > li {
  display: table-cell;
}
/* line 126, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--fit > li > a {
  display: block;
}

/**
 * Make a list of keywords. Extends `.nav`, e.g.:
 * 
   `<ul class="nav  nav--keywords>`
 * 
 */
/* line 143, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--keywords > li:after {
  content: ", ";
}
/* line 147, ../../sass/base/inuit.css/objects/_nav.scss */
.nav--keywords > li:last-child:after {
  display: none;
}

/*------------------------------------*\
    $OPTIONS
\*------------------------------------*/
/**
 * Link-group nav, used for displaying related options. Extends `.nav--block`
 * but could also extend `.nav--fit`. Extend with colours and ‘current states’
 * in your theme stylesheet.
 * 
  <ul class="nav  options">
      <li><a></a></li>
      <li><a></a></li>
      <li><a></a></li>
      <li><a></a></li>
   </ul>
 * 
 * Demo: jsfiddle.net/inuitcss/vwfaf
 * 
 */
/* line 24, ../../sass/base/inuit.css/objects/_options.scss */
.options > li > a {
  border: 0 solid #ccc;
  /* Extend in your theme stylesheet */
  border-width: 1px;
  border-left-width: 0;
}
/* line 30, ../../sass/base/inuit.css/objects/_options.scss */
.options > li:first-child > a {
  border-left-width: 1px;
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
/* line 36, ../../sass/base/inuit.css/objects/_options.scss */
.options > li:last-child > a {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

/*------------------------------------*\
    $PAGINATION
\*------------------------------------*/
/**
 * Basic pagination object, extends `.nav`.
 * Requires some funky commenting to collapse any white-space caused by the
 * `display:inline-block;` rules.
 * 
   <ol class="nav  pagination">
       <li class=pagination__first>First</li>
       <li class=pagination__prev>Previous</li>
       <li><a href=/page/1>1</a></li>
       <li><a href=/page/2>2</a></li>
       <li class=current><a href=/page/3>3</a></li>
       <li><a href=/page/4>4</a></li>
       <li><a href=/page/5>5</a></li>
       <li class=pagination__next><a href=/page/next>Next</a></li>
       <li class=pagination__last><a href=/page/last>Last</a></li>
   </ol>
 * 
 * Demo: jsfiddle.net/inuitcss/9Y6PU
 * 
 */
/* line 24, ../../sass/base/inuit.css/objects/_pagination.scss */
.pagination {
  text-align: center;
  /**
   * Remove whitespace caused by `inline-block`.
   */
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
}

/* line 32, ../../sass/base/inuit.css/objects/_pagination.scss */
.pagination > li {
  padding: 12px;
  letter-spacing: normal;
  word-spacing: normal;
}

/* line 37, ../../sass/base/inuit.css/objects/_pagination.scss */
.pagination > li > a {
  padding: 12px;
  margin: -12px;
}

/* line 41, ../../sass/base/inuit.css/objects/_pagination.scss */
.pagination__first a:before {
  content: "« ";
}

/* line 44, ../../sass/base/inuit.css/objects/_pagination.scss */
.pagination__last a:after {
  content: " »";
}

/*------------------------------------*\
    $BREADCRUMB
\*------------------------------------*/
/**
 * Simple breadcrumb styling to apply to (ordered) lists. Extends `.nav`, e.g.:
 * 
   <ol class="nav  breadcrumb">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>The Board</a></li>
       <li class=current><a href=#>Directors</a></li>
   </ol>
 * 
 * Demo: jsfiddle.net/inuitcss/rkAY9
 * 
 */
/* line 17, ../../sass/base/inuit.css/objects/_breadcrumb.scss */
.breadcrumb > li + li:before {
  content: "» ";
}

/**
 * For denoting a path-like structure, GitHub style, e.g.:
 * 
   <ol class="nav  breadcrumb--path">
       <li class=breadcrumb__root><a href=#>inuit.css</a></li>
       <li><a href=#>inuit.css</a></li>
       <li><a href=#>partials</a></li>
       <li class=current><a href=#>objects</a></li>
   </ol>
 * 
 */
/* line 33, ../../sass/base/inuit.css/objects/_breadcrumb.scss */
.breadcrumb--path > li + li:before {
  content: "/ ";
}

/**
 * Assign a delimiter on the fly through a data attribute, e.g.:
 * 
   <ol class="nav  breadcrumb">
       <li><a href=#>Home</a></li>
       <li data-breadcrumb="|"><a href=#>About</a></li>
       <li data-breadcrumb="|"><a href=#>The Board</a></li>
       <li data-breadcrumb="|" class=current><a href=#>Directors</a></li>
   </ol>
 * 
 */
/* line 49, ../../sass/base/inuit.css/objects/_breadcrumb.scss */
.breadcrumb > li + li[data-breadcrumb]:before {
  content: attr(data-breadcrumb) " ";
}

/**
 * Denote the root of the tree.
 */
/* line 57, ../../sass/base/inuit.css/objects/_breadcrumb.scss */
.breadcrumb__root {
  font-weight: bold;
}

/*------------------------------------*\
    $MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 * E.g.:
 * 
   <div class=media>
       <img src=http://placekitten.com/200/300 alt="" class=media__img>
       <p class=media__body>Lorem ipsum dolor sit amet, consectetur adipisicing elit,
       sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
   </div>
 * 
 * Demo: jsfiddle.net/inuitcss/cf4Qs
 * 
 */
/* line 18, ../../sass/base/inuit.css/objects/_media.scss */
.media {
  display: block;
}

/* line 22, ../../sass/base/inuit.css/objects/_media.scss */
.media__img {
  float: left;
  margin-right: 24px;
}

/**
 * Reversed image location (right instead of left).
 */
/* line 29, ../../sass/base/inuit.css/objects/_media.scss */
.media__img--rev {
  float: right;
  margin-left: 24px;
}

/* line 35, ../../sass/base/inuit.css/objects/_media.scss */
.media__img img,
.media__img--rev img {
  display: block;
}

/* line 39, ../../sass/base/inuit.css/objects/_media.scss */
.media__body {
  overflow: hidden;
}

/* line 43, ../../sass/base/inuit.css/objects/_media.scss */
.media__body,
.media__body > :last-child {
  margin-bottom: 0;
}

/**
 * `.img`s in `.islet`s need an appropriately sized margin.
 */
/* line 51, ../../sass/base/inuit.css/objects/_media.scss */
.islet .media__img {
  margin-right: 12px;
}

/* line 54, ../../sass/base/inuit.css/objects/_media.scss */
.islet .media__img--rev {
  margin-left: 12px;
}

/*------------------------------------*\
    $MARGINALIA
\*------------------------------------*/
/**
 * Marginalia are, per definition, notes in the margin of a document. The
 * `marginalia__body` class can be applied to all kinds of content, like text or
 * images, and is joined by a width class:
 *
   <div class="marginalia">
       <div class="marginalia__body  desk-one-fifth"></div>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/AemkH
 *
 */
/* line 16, ../../sass/base/inuit.css/objects/_marginalia.scss */
.marginalia {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
}

/**
 * Wait for a certain breakpoint to trigger ‘proper' marginalia. Up to this point,
 * marginalia are inline with the other text.
 */
@media (min-width: 1024px) {
  /* line 25, ../../sass/base/inuit.css/objects/_marginalia.scss */
  .marginalia {
    position: relative;
  }

  /* line 30, ../../sass/base/inuit.css/objects/_marginalia.scss */
  .marginalia__body,
  .marginalia__body--right {
    position: absolute;
  }

  /* line 34, ../../sass/base/inuit.css/objects/_marginalia.scss */
  .marginalia__body {
    right: 100%;
    padding-right: 24px;
    text-align: right;
  }

  /**
   * Align marginalia to the right of the text.
   */
  /* line 43, ../../sass/base/inuit.css/objects/_marginalia.scss */
  .marginalia__body--right {
    left: 100%;
    padding-left: 24px;
    text-align: left;
  }
}
/*------------------------------------*\
    $ISLAND
\*------------------------------------*/
/**
 * Simple, boxed off content, as per: csswizardry.com/2011/10/the-island-object
 * E.g.:
 * 
   <div class=island>
       I am boxed off.
   </div>
 * 
 * Demo: jsfiddle.net/inuitcss/u8pV3
 * 
 */
/* line 16, ../../sass/base/inuit.css/objects/_island.scss */
.island,
.islet {
  display: block;
}

/* line 20, ../../sass/base/inuit.css/objects/_island.scss */
.island {
  padding: 24px;
}

/* line 24, ../../sass/base/inuit.css/objects/_island.scss */
.island > :last-child,
.islet > :last-child {
  margin-bottom: 0;
}

/**
 * Just like `.island`, only smaller.
 */
/* line 32, ../../sass/base/inuit.css/objects/_island.scss */
.islet {
  padding: 12px;
}

/*------------------------------------*\
    $BLOCK-LIST
\*------------------------------------*/
/**
 * Create big blocky lists of content, e.g.:
 * 
   <ul class=block-list>
      <li>Foo</li>
      <li>Bar</li>
      <li>Baz</li>
      <li><a href=# class=block-list__link>Foo Bar Baz</a></li>
   </ul>
 * 
 * Extend this object in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/hR57q
 * 
 */
/* line 22, ../../sass/base/inuit.css/objects/_block-list.scss */
.block-list,
.block-list > li {
  border: 0 solid #ccc;
  /* Override this color in your theme stylesheet */
}

/* line 26, ../../sass/base/inuit.css/objects/_block-list.scss */
.block-list {
  list-style: none;
  margin-left: 0;
  border-top-width: 1px;
}
/* line 31, ../../sass/base/inuit.css/objects/_block-list.scss */
.block-list > li {
  border-bottom-width: 1px;
  padding: 12px;
}

/* line 36, ../../sass/base/inuit.css/objects/_block-list.scss */
.block-list__link {
  display: block;
  padding: 12px;
  margin: -12px;
}

/*------------------------------------*\
    $MATRIX
\*------------------------------------*/
/**
 * Create a grid of items out of a single list, e.g.:
 * 
   <ul class="matrix  three-cols">
       <li class=all-cols>Lorem</li>
       <li>Ipsum <a href=#>dolor</a></li>
       <li><a href=# class=matrix__link>Sit</a></li>
       <li>Amet</li>
       <li class=all-cols>Consectetuer</li>
   </ul>
 * 
 * Extend this object in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 * 
 */
/* line 23, ../../sass/base/inuit.css/objects/_matrix.scss */
.matrix,
.matrix > li {
  border: 0 solid #ccc;
  /* Override this color in your theme stylesheet */
}

/* line 27, ../../sass/base/inuit.css/objects/_matrix.scss */
.matrix {
  list-style: none;
  margin-left: 0;
  border-top-width: 1px;
  border-left-width: 1px;
}
/* line 34, ../../sass/base/inuit.css/objects/_matrix.scss */
.matrix > li {
  padding: 12px;
  float: left;
  border-right-width: 1px;
  border-bottom-width: 1px;
}

/* line 44, ../../sass/base/inuit.css/objects/_matrix.scss */
.matrix__link {
  display: block;
  padding: 12px;
  margin: -12px;
}

/**
 * The `.multi-list` object is a lot like the `.matrix` object only without the
 * blocky borders and padding.
 * 
   <ul class="multi-list  four-cols">
       <li>Lorem</li>
       <li>Ipsum</li>
       <li>Dolor</li>
       <li>Sit</li>
   </ul>
 * 
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 * 
 */
/* line 65, ../../sass/base/inuit.css/objects/_matrix.scss */
.multi-list {
  list-style: none;
  margin-left: 0;
}

/* line 70, ../../sass/base/inuit.css/objects/_matrix.scss */
.multi-list > li {
  float: left;
}

/**
 * Apply these classes alongside the `.matrix` or `.multi-list` classes on
 * lists to determine how wide their columns are.
 */
/* line 79, ../../sass/base/inuit.css/objects/_matrix.scss */
.two-cols > li {
  width: 50%;
}

/* line 82, ../../sass/base/inuit.css/objects/_matrix.scss */
.three-cols > li {
  width: 33.333%;
}

/* line 85, ../../sass/base/inuit.css/objects/_matrix.scss */
.four-cols > li {
  width: 25%;
}

/* line 88, ../../sass/base/inuit.css/objects/_matrix.scss */
.five-cols > li {
  width: 20%;
}

/**
 * Unfortunately we have to qualify this selector in order to bring its
 * specificity above the `.[number]-cols > li` selectors above.
 */
/* line 96, ../../sass/base/inuit.css/objects/_matrix.scss */
.matrix > .all-cols,
.multi-list > .all-cols {
  width: 100%;
}

/*------------------------------------*\
    $SPLIT
\*------------------------------------*/
/**
 * Simple split item for creating two elements floated away from one another,
 * e.g.:
 * 
   <dl class=split>       
       <dt class=split__title>Burger and fries</dt>
       <dd>&pound;5.99</dd>       
       <dt class=split__title>Fillet steak</dt>
       <dd>&pound;19.99</dd>       
       <dt class=split__title>Ice cream</dt>
       <dd>&pound;2.99</dd>       
   </dl>
 * 
   <ol class="split  results">
       <li class=first><b class=split__title>1st place</b> Bob</li>       
       <li class=second><b class=split__title>2nd place</b> Lilly</li>       
       <li class=third><b class=split__title>3rd place</b> Ted</li>       
   </ol>​
 * 
 * Demo: jsfiddle.net/inuitcss/9gZW7
 * 
 */
/* line 26, ../../sass/base/inuit.css/objects/_split.scss */
.split {
  text-align: right;
  list-style: none;
  margin-left: 0;
}

/* line 31, ../../sass/base/inuit.css/objects/_split.scss */
.split__title {
  text-align: left;
  float: left;
  clear: left;
}

/*------------------------------------*\
    $THIS-OR-THIS
\*------------------------------------*/
/**
 * Simple options object to provide multiple choices, e.g.:
 * 
   <h1 class=this-or-this>
       <a href=# class="this-or-this__this  two-fifths">
           Free
       </a>
       <span class="this-or-this__or  one-fifth">
           or
       </span>
       <a href=# class="this-or-this__this  two-fifths">
           Pro
       </a>
   </h1>
 * 
 * The `.this-or-this__this` and `.this-or-this__or` objects can be sized using
 * the grid-system classes.
 * 
 * Demo: jsfiddle.net/inuitcss/R3sks
 * 
 */
/* line 25, ../../sass/base/inuit.css/objects/_this-or-this.scss */
.this-or-this {
  display: table;
  width: 100%;
  text-align: center;
}

/* line 31, ../../sass/base/inuit.css/objects/_this-or-this.scss */
.this-or-this__this,
.this-or-this__or {
  display: table-cell;
  vertical-align: middle;
}

/*------------------------------------*\
    $LINK-COMPLEX
\*------------------------------------*/
/**
 * As inspired by @necolas:
 * github.com/necolas/suit-utils/blob/master/link.css#L18
 * 
 * Add hover behaviour to only selected items within links, e.g.:
 * 
   <a href=log-in class=link-complex>
       <i class="s  s--user"></i>
       <span class=link-complex__target>Log in</span>
   </a>
 * 
 * Demo: jsfiddle.net/inuitcss/rt9M3
 * 
 */
/* line 21, ../../sass/base/inuit.css/objects/_link-complex.scss */
.link-complex,
.link-complex:hover,
.link-complex:active,
.link-complex:focus {
  text-decoration: none;
}

/* line 26, ../../sass/base/inuit.css/objects/_link-complex.scss */
.link-complex:hover .link-complex__target,
.link-complex:active .link-complex__target,
.link-complex:focus .link-complex__target {
  text-decoration: underline;
}

/*------------------------------------*\
    $FLYOUT
\*------------------------------------*/
/**
 * Flyouts are pieces of content that fly out of a parent when said parent is
 * hovered. They typically appear bottom-left of the parent.
 * 
   <div class=flyout>
       Foo
       <div class=flyout__content>
           <h1>Lorem</h1>
           <p>Ipsum</p>
       </div>
   </div>
 * 
 * Extend these objects in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/B52HG
 * 
 */
/* line 22, ../../sass/base/inuit.css/objects/_flyout.scss */
.flyout,
.flyout--alt {
  position: relative;
  overflow: hidden;
}

/* line 26, ../../sass/base/inuit.css/objects/_flyout.scss */
.flyout__content {
  /**
   * Position the flyouts off-screen. This is typically better than
   * `display:none;`.
   */
  position: absolute;
  top: 100%;
  left: -99999px;
}

/**
 * Bring the flyouts into view when you hover their parents.
 * Two different types of flyout; ‘regular’ (`.flyout`) and ‘alternative’
 * (`.flyout--alt`).
 */
/* line 42, ../../sass/base/inuit.css/objects/_flyout.scss */
.flyout:hover,
.flyout--alt:hover {
  overflow: visible;
}

/**
 * Regular flyouts sit all the way from the top, flush left.
 */
/* line 49, ../../sass/base/inuit.css/objects/_flyout.scss */
.flyout:hover > .flyout__content {
  left: 0;
}

/**
 * Alternative flyouts sit all the way from the left, flush top.
 */
/* line 56, ../../sass/base/inuit.css/objects/_flyout.scss */
.flyout--alt:hover > .flyout__content {
  top: 0;
  left: 100%;
}

/*------------------------------------*\
    $ARROWS
\*------------------------------------*/
/**
 * It is a common design treatment to give an element a triangular points-out
 * arrow, we typically build these with CSS. These following classes allow us to
 * generate these arbitrarily with a mixin, `@arrow()`.
 */
/**
 * Forms the basis for any/all CSS arrows.
 */
/**
 * Define individual edges so we can combine what we need, when we need.
 */
/*------------------------------------*\
    $SPRITE
\*------------------------------------*/
/**
 * Giving an element a class of `.s` will throw it into ‘sprite’ mode and apply
 * a background image e.g.:
 * 
   <a class="s  s--question-mark">More info&hellip;</a>
 * 
 * or
 * 
   <a href=#><i class="s  s--question-mark"></i> Help and FAQ</a>
 * 
 * Giving an element a class of `.i` will throw it into ‘icon’ mode and will
 * not add a background, but should be used for icon fonts and is populated
 * through a `data-icon` attribute and the `:after` pseudo-element, e.g.:
 * 
   <a href=#><i class=i data-icon="&#xF000;"></i> View your favourites</a>
 * 
 * Where ‘&#xF000;’ might map to a star in your particular font.
 * 
 * These all require extension in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/6TKuS
 * 
 */
/* line 28, ../../sass/base/inuit.css/objects/_sprite.scss */
.s,
.i {
  display: inline-block;
  line-height: 1;
  position: relative;
  vertical-align: middle;
  zoom: 1;
  /**
   * So using `.i` on certain elements doesn’t make a visual difference.
   */
  font-style: normal;
  font-weight: normal;
  /**
   * So icons added using `.i` sit in the centre of the element.
   */
  text-align: center;
}

/* line 44, ../../sass/base/inuit.css/objects/_sprite.scss */
.s {
  background-image: url(/path/to/your/sprite.png);
  /**
   * The typical size of most icons. Override in your theme stylesheet.
   */
  width: 16px;
  height: 16px;
  top: -1px;
  /*
   * H5BP method image replacement:
   * github.com/h5bp/html5-boilerplate/commit/adecc5da035d6d76b77e3fa95c6abde841073da2
   */
  overflow: hidden;
  *text-indent: -9999px;
}
/* line 60, ../../sass/base/inuit.css/objects/_sprite.scss */
.s:before {
  content: "";
  display: block;
  width: 0;
  height: 100%;
}

/**
 * Set up Batch icon font
 */
/* line 71, ../../sass/base/inuit.css/objects/_sprite.scss */
.i {
  font-size: 16px;
  /**
   * Place the icon in a box the exact same dimensions as the icon itself.
   */
  width: 1em;
  height: 1em;
}
/* line 82, ../../sass/base/inuit.css/objects/_sprite.scss */
.i:before {
  content: attr(data-icon);
}

/**
 * Icon size modifiers.
 */
/* line 90, ../../sass/base/inuit.css/objects/_sprite.scss */
.i--large {
  font-size: 32px;
}

/* line 91, ../../sass/base/inuit.css/objects/_sprite.scss */
.i--huge {
  font-size: 64px;
}

/* line 92, ../../sass/base/inuit.css/objects/_sprite.scss */
.i--natural {
  font-size: inherit;
}

/*------------------------------------*\
    $ICON-TEXT
\*------------------------------------*/
/**
 * For text-links etc that have an icon with them. Sometimes whitespace would
 * suffice in creating a gap between the icon and text, for example:
 * 
   <a href=#>
       <i class="s  s--help"></i> Help &amp; support
   </a>
 * 
 * However we will sometimes want a larger, explicity set gap:
   <a href=# class=icon-text>
       <i class="icon-text__icon  s  s--help"></i>Help &amp; support
   </a>
 * 
 * Demo: jsfiddle.net/inuitcss/Q6Lbf
 * 
 */
/* line 20, ../../sass/base/inuit.css/objects/_icon-text.scss */
.icon-text > .icon-text__icon {
  margin-right: 6px;
}

/**
 * We can also reverse the direction of the margin for icons that appear to the
 * right of the text content, thus:
 *
   <a href=# class=icon-text--rev>
       Help &amp; support<i class="icon-text__icon  s  s--help"></i>
   </a>
 *
 */
/* line 34, ../../sass/base/inuit.css/objects/_icon-text.scss */
.icon-text--rev > .icon-text__icon {
  margin-left: 6px;
}

/*------------------------------------*\
    $BUTTONS
\*------------------------------------*/
/**
 * Basic button structural styling. Extend in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/RqHcp
 * 
 */
/* line 10, ../../sass/base/inuit.css/objects/_buttons.scss */
.btn {
  font: inherit;
  cursor: pointer;
  border: none;
  display: inline-block;
  margin: 0;
  line-height: 1;
  /**
   * Set padding in ems so we can change the size of a button by merely
   * altering its `font-size`.
   */
  padding: 0.5em;
}

/* line 24, ../../sass/base/inuit.css/objects/_buttons.scss */
.btn,
.btn:hover {
  text-decoration: none;
}

/**
 * Basic button modifiers
 */
/* line 31, ../../sass/base/inuit.css/objects/_buttons.scss */
.btn--sml {
  font-size: .75em;
}

/* line 32, ../../sass/base/inuit.css/objects/_buttons.scss */
.btn--lrg {
  font-size: 1.50em;
}

/* line 34, ../../sass/base/inuit.css/objects/_buttons.scss */
.btn--full {
  display: block;
  text-align: center;
  /**
   * The following is so that `.btn-full` works properly on `input`s as well
   * as `a`s.
   */
  padding-right: 0;
  padding-left: 0;
  width: 100%;
}

/*------------------------------------*\
    $LOZENGES
\*------------------------------------*/
/**
 * Create pill- and lozenge-like runs of text, e.g.:
 * 
   <p>This <span class=pill>here</span> is a pill!</p>
 * 
   <p>This <span class=loz>here</span> is also a lozenge!</p>
 * 
 * Pills have fully rounded ends, lozenges have only their corners rounded.
 * 
 * Demo: jsfiddle.net/inuitcss/N3pGm
 * 
 */
/* line 16, ../../sass/base/inuit.css/objects/_lozenges.scss */
.pill, .loz {
  display: inline-block;
  /**
   * These numbers set in ems mean that, at its narrowest, a lozenge will be
   * the same width as the `line-height` set on the `html` element.
   * This allows us to use the `.loz` in almost any `font-size` we wish.
   */
  min-width: 1.0em;
  padding-right: 0.25em;
  padding-left: 0.25em;
  /* =1.50em */
  text-align: center;
  background-color: #ccc;
  /* Override this color in your theme stylesheet */
  color: #fff;
  /* Override this color in your theme stylesheet */
  /**
   * Normally we’d use border-radius:100%; but instead here we just use an
   * overly large number; `border-radius:100%;` would create an oval on
   * non-square elements whereas we just want to round the ends of an element.
   */
  border-radius: 100px;
}

/* line 39, ../../sass/base/inuit.css/objects/_lozenges.scss */
.loz {
  border-radius: 4px;
}

/*------------------------------------*\
    $RULES
\*------------------------------------*/
/**
 * Horizontal rules, extend `hr`.
 * 
 * Demo: jsfiddle.net/inuitcss/L6GuZ
 * 
 */
/* line 10, ../../sass/base/inuit.css/objects/_rules.scss */
.rule {
  color: #ccc;
  /* Sets border color, extend in your theme stylesheet. */
  border: none;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  margin-bottom: 23px;
  margin-bottom: 1.4375rem;
}

/**
 * Dotted rules
 */
/* line 23, ../../sass/base/inuit.css/objects/_rules.scss */
.rule--dotted {
  border-bottom-style: dotted;
}

/**
 * Dashed rules
 */
/* line 31, ../../sass/base/inuit.css/objects/_rules.scss */
.rule--dashed {
  border-bottom-style: dashed;
}

/**
 * Ornamental rules. Places a § over the rule.
 */
/* line 39, ../../sass/base/inuit.css/objects/_rules.scss */
.rule--ornament {
  position: relative;
  /**
  * Pass in an arbitrary ornament though a data attribute, e.g.:
  * 
    <hr class="rule  rule--ornament" data-ornament="!">
  * 
  */
}
/* line 42, ../../sass/base/inuit.css/objects/_rules.scss */
.rule--ornament:after {
  content: "§";
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  line-height: 0;
  text-align: center;
}
/* line 58, ../../sass/base/inuit.css/objects/_rules.scss */
.rule--ornament[data-ornament]:after {
  content: attr(data-ornament);
}

/*------------------------------------*\
    $STATS
\*------------------------------------*/
/**
 * Simple object to display key–value statistic-like information, e.g.: 
 *
   <div class=stat-group>
       <dl class=stat>
           <dt class=stat__title>Tweets</dt>
           <dd class=stat__value>27,740</dd>
       </dl>
       
       <dl class=stat>
           <dt class=stat__title>Following</dt>
           <dd class=stat__value>11,529</dd>
       </dl>
       
       <dl class=stat>
           <dt class=stat__title>Followers</dt>
           <dd class=stat__value>12,105</dd>
       </dl>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/Bpwu6
 *
 */
/* line 27, ../../sass/base/inuit.css/objects/_stats.scss */
.stat-group {
  margin-left: -24px;
}

/* line 31, ../../sass/base/inuit.css/objects/_stats.scss */
.stat {
  float: left;
  margin-left: 24px;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: flex;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  -o-flex-direction: column;
  flex-direction: column;
}

/* line 40, ../../sass/base/inuit.css/objects/_stats.scss */
.stat__title {
  -webkit-order: 2;
  -moz-order: 2;
  -ms-order: 2;
  -o-order: 2;
  order: 2;
  -ms-flex-order: 2;
}

/* line 44, ../../sass/base/inuit.css/objects/_stats.scss */
.stat__value {
  margin-left: 0;
  -webkit-order: 1;
  -moz-order: 1;
  -ms-order: 1;
  -o-order: 1;
  order: 1;
  -ms-flex-order: 1;
}

/*------------------------------------*\
    $GREYBOX
\*------------------------------------*/
/**
 * Quickly throw together greybox wireframes. Use in conjunction with other
 * inuit.css objects to create simple greybox prototypes, e.g.:
 * 
   <div class="island  greybox  greybox--medium">Header</div>
   
   <ul class="nav  nav--fit  nav--block  greybox">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 * The beauty of combining the greyboxing with inuit.css objects is that any
 * prototyping can quickly be converted into/used as production code.
 * 
 * For a more complete prototyping framework, consider Adam Whitcroft’s Proto:
 * adamwhitcroft.com/proto
 * 
 * Demo: jsfiddle.net/inuitcss/qCXfh/
 * 
 */
/* line 27, ../../sass/base/inuit.css/objects/_greybox.scss */
.greybox,
.graybox {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
  font-family: sans-serif;
  text-align: center;
  background-color: rgba(0, 0, 0, 0.2);
  color: #fff;
}

/* line 35, ../../sass/base/inuit.css/objects/_greybox.scss */
.greybox a,
.graybox a {
  color: #fff;
  text-decoration: underline;
}

/**
 * All greyboxes will occupy 100% of their parent’s width, but to alter their
 * heights we apply incrementally larger line-heights:
 */
/* line 46, ../../sass/base/inuit.css/objects/_greybox.scss */
.greybox--small,
.graybox--small {
  line-height: 48px;
}

/* line 48, ../../sass/base/inuit.css/objects/_greybox.scss */
.greybox--medium,
.graybox--medium {
  line-height: 96px;
}

/* line 50, ../../sass/base/inuit.css/objects/_greybox.scss */
.greybox--large,
.graybox--large {
  line-height: 192px;
}

/* line 52, ../../sass/base/inuit.css/objects/_greybox.scss */
.greybox--huge,
.graybox--huge {
  line-height: 384px;
}

/* line 54, ../../sass/base/inuit.css/objects/_greybox.scss */
.greybox--gigantic,
.graybox--gigantic {
  line-height: 768px;
}

/*------------------------------------*\
    $BATCH
\*------------------------------------*/
/**
 * Style trumps; helper and brand classes
 */
/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */
/**
* Whole
*/
/* line 17, ../../sass/base/inuit.css/generic/_widths.scss */
.one-whole {
  width: 100%;
}

/**
* Halves
*/
/* line 23, ../../sass/base/inuit.css/generic/_widths.scss */
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%;
}

/**
* Thirds
*/
/* line 29, ../../sass/base/inuit.css/generic/_widths.scss */
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%;
}

/* line 30, ../../sass/base/inuit.css/generic/_widths.scss */
.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%;
}

/**
* Quarters
*/
/* line 36, ../../sass/base/inuit.css/generic/_widths.scss */
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%;
}

/* line 38, ../../sass/base/inuit.css/generic/_widths.scss */
.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%;
}

/**
* Fifths
*/
/* line 44, ../../sass/base/inuit.css/generic/_widths.scss */
.one-fifth, .two-tenths {
  width: 20%;
}

/* line 45, ../../sass/base/inuit.css/generic/_widths.scss */
.two-fifths, .four-tenths {
  width: 40%;
}

/* line 46, ../../sass/base/inuit.css/generic/_widths.scss */
.three-fifths, .six-tenths {
  width: 60%;
}

/* line 47, ../../sass/base/inuit.css/generic/_widths.scss */
.four-fifths, .eight-tenths {
  width: 80%;
}

/**
* Sixths
*/
/* line 53, ../../sass/base/inuit.css/generic/_widths.scss */
.one-sixth, .two-twelfths {
  width: 16.666%;
}

/* line 57, ../../sass/base/inuit.css/generic/_widths.scss */
.five-sixths, .ten-twelfths {
  width: 83.333%;
}

/**
* Eighths
*/
/* line 63, ../../sass/base/inuit.css/generic/_widths.scss */
.one-eighth {
  width: 12.5%;
}

/* line 65, ../../sass/base/inuit.css/generic/_widths.scss */
.three-eighths {
  width: 37.5%;
}

/* line 67, ../../sass/base/inuit.css/generic/_widths.scss */
.five-eighths {
  width: 62.5%;
}

/* line 69, ../../sass/base/inuit.css/generic/_widths.scss */
.seven-eighths {
  width: 87.5%;
}

/**
* Tenths
*/
/* line 75, ../../sass/base/inuit.css/generic/_widths.scss */
.one-tenth {
  width: 10%;
}

/* line 77, ../../sass/base/inuit.css/generic/_widths.scss */
.three-tenths {
  width: 30%;
}

/* line 81, ../../sass/base/inuit.css/generic/_widths.scss */
.seven-tenths {
  width: 70%;
}

/* line 83, ../../sass/base/inuit.css/generic/_widths.scss */
.nine-tenths {
  width: 90%;
}

/**
* Twelfths
*/
/* line 89, ../../sass/base/inuit.css/generic/_widths.scss */
.one-twelfth {
  width: 8.333%;
}

/* line 93, ../../sass/base/inuit.css/generic/_widths.scss */
.five-twelfths {
  width: 41.666%;
}

/* line 95, ../../sass/base/inuit.css/generic/_widths.scss */
.seven-twelfths {
  width: 58.333%;
}

/* line 99, ../../sass/base/inuit.css/generic/_widths.scss */
.eleven-twelfths {
  width: 91.666%;
}

/**
 * If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoing you’d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
 *
 * This would create a `div` that, at ‘desktop’ sizes, takes up a quarter of the
 * horizontal space, a half of that space at ‘tablet’ sizes, and goes full width
 * at ‘mobile’ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */
@media only screen and (max-width: 480px) {
  /**
  * Whole
  */
  /* line 17, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  /* line 23, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-one-half, .palm-two-quarters, .palm-three-sixths, .palm-four-eighths, .palm-five-tenths, .palm-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  /* line 29, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-one-third, .palm-two-sixths, .palm-four-twelfths {
    width: 33.333%;
  }

  /* line 30, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-two-thirds, .palm-four-sixths, .palm-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  /* line 36, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-one-quarter, .palm-two-eighths, .palm-three-twelfths {
    width: 25%;
  }

  /* line 38, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-three-quarters, .palm-six-eighths, .palm-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  /* line 44, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-one-fifth, .palm-two-tenths {
    width: 20%;
  }

  /* line 45, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-two-fifths, .palm-four-tenths {
    width: 40%;
  }

  /* line 46, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-three-fifths, .palm-six-tenths {
    width: 60%;
  }

  /* line 47, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-four-fifths, .palm-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  /* line 53, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-one-sixth, .palm-two-twelfths {
    width: 16.666%;
  }

  /* line 57, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-five-sixths, .palm-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  /* line 63, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-one-eighth {
    width: 12.5%;
  }

  /* line 65, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-three-eighths {
    width: 37.5%;
  }

  /* line 67, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-five-eighths {
    width: 62.5%;
  }

  /* line 69, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  /* line 75, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-one-tenth {
    width: 10%;
  }

  /* line 77, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-three-tenths {
    width: 30%;
  }

  /* line 81, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-seven-tenths {
    width: 70%;
  }

  /* line 83, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  /* line 89, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-one-twelfth {
    width: 8.333%;
  }

  /* line 93, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-five-twelfths {
    width: 41.666%;
  }

  /* line 95, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-seven-twelfths {
    width: 58.333%;
  }

  /* line 99, ../../sass/base/inuit.css/generic/_widths.scss */
  .palm-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /**
  * Whole
  */
  /* line 17, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  /* line 23, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-one-half, .lap-two-quarters, .lap-three-sixths, .lap-four-eighths, .lap-five-tenths, .lap-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  /* line 29, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-one-third, .lap-two-sixths, .lap-four-twelfths {
    width: 33.333%;
  }

  /* line 30, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-two-thirds, .lap-four-sixths, .lap-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  /* line 36, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-one-quarter, .lap-two-eighths, .lap-three-twelfths {
    width: 25%;
  }

  /* line 38, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-three-quarters, .lap-six-eighths, .lap-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  /* line 44, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-one-fifth, .lap-two-tenths {
    width: 20%;
  }

  /* line 45, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-two-fifths, .lap-four-tenths {
    width: 40%;
  }

  /* line 46, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-three-fifths, .lap-six-tenths {
    width: 60%;
  }

  /* line 47, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-four-fifths, .lap-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  /* line 53, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-one-sixth, .lap-two-twelfths {
    width: 16.666%;
  }

  /* line 57, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-five-sixths, .lap-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  /* line 63, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-one-eighth {
    width: 12.5%;
  }

  /* line 65, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-three-eighths {
    width: 37.5%;
  }

  /* line 67, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-five-eighths {
    width: 62.5%;
  }

  /* line 69, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  /* line 75, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-one-tenth {
    width: 10%;
  }

  /* line 77, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-three-tenths {
    width: 30%;
  }

  /* line 81, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-seven-tenths {
    width: 70%;
  }

  /* line 83, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  /* line 89, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-one-twelfth {
    width: 8.333%;
  }

  /* line 93, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-five-twelfths {
    width: 41.666%;
  }

  /* line 95, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-seven-twelfths {
    width: 58.333%;
  }

  /* line 99, ../../sass/base/inuit.css/generic/_widths.scss */
  .lap-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (max-width: 1023px) {
  /**
  * Whole
  */
  /* line 17, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  /* line 23, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-one-half, .portable-two-quarters, .portable-three-sixths, .portable-four-eighths, .portable-five-tenths, .portable-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  /* line 29, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-one-third, .portable-two-sixths, .portable-four-twelfths {
    width: 33.333%;
  }

  /* line 30, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-two-thirds, .portable-four-sixths, .portable-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  /* line 36, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-one-quarter, .portable-two-eighths, .portable-three-twelfths {
    width: 25%;
  }

  /* line 38, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-three-quarters, .portable-six-eighths, .portable-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  /* line 44, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-one-fifth, .portable-two-tenths {
    width: 20%;
  }

  /* line 45, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-two-fifths, .portable-four-tenths {
    width: 40%;
  }

  /* line 46, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-three-fifths, .portable-six-tenths {
    width: 60%;
  }

  /* line 47, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-four-fifths, .portable-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  /* line 53, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-one-sixth, .portable-two-twelfths {
    width: 16.666%;
  }

  /* line 57, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-five-sixths, .portable-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  /* line 63, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-one-eighth {
    width: 12.5%;
  }

  /* line 65, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-three-eighths {
    width: 37.5%;
  }

  /* line 67, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-five-eighths {
    width: 62.5%;
  }

  /* line 69, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  /* line 75, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-one-tenth {
    width: 10%;
  }

  /* line 77, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-three-tenths {
    width: 30%;
  }

  /* line 81, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-seven-tenths {
    width: 70%;
  }

  /* line 83, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  /* line 89, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-one-twelfth {
    width: 8.333%;
  }

  /* line 93, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-five-twelfths {
    width: 41.666%;
  }

  /* line 95, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-seven-twelfths {
    width: 58.333%;
  }

  /* line 99, ../../sass/base/inuit.css/generic/_widths.scss */
  .portable-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 1024px) {
  /**
  * Whole
  */
  /* line 17, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  /* line 23, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-one-half, .desk-two-quarters, .desk-three-sixths, .desk-four-eighths, .desk-five-tenths, .desk-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  /* line 29, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-one-third, .desk-two-sixths, .desk-four-twelfths {
    width: 33.333%;
  }

  /* line 30, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-two-thirds, .desk-four-sixths, .desk-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  /* line 36, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-one-quarter, .desk-two-eighths, .desk-three-twelfths {
    width: 25%;
  }

  /* line 38, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-three-quarters, .desk-six-eighths, .desk-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  /* line 44, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-one-fifth, .desk-two-tenths {
    width: 20%;
  }

  /* line 45, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-two-fifths, .desk-four-tenths {
    width: 40%;
  }

  /* line 46, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-three-fifths, .desk-six-tenths {
    width: 60%;
  }

  /* line 47, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-four-fifths, .desk-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  /* line 53, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-one-sixth, .desk-two-twelfths {
    width: 16.666%;
  }

  /* line 57, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-five-sixths, .desk-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  /* line 63, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-one-eighth {
    width: 12.5%;
  }

  /* line 65, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-three-eighths {
    width: 37.5%;
  }

  /* line 67, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-five-eighths {
    width: 62.5%;
  }

  /* line 69, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  /* line 75, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-one-tenth {
    width: 10%;
  }

  /* line 77, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-three-tenths {
    width: 30%;
  }

  /* line 81, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-seven-tenths {
    width: 70%;
  }

  /* line 83, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  /* line 89, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-one-twelfth {
    width: 8.333%;
  }

  /* line 93, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-five-twelfths {
    width: 41.666%;
  }

  /* line 95, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-seven-twelfths {
    width: 58.333%;
  }

  /* line 99, ../../sass/base/inuit.css/generic/_widths.scss */
  .desk-eleven-twelfths {
    width: 91.666%;
  }
}
/**
 * If you have set the additional `$responsive-extra` variable to ‘true’ in
 * `_vars.scss` then you now have access to the following class available to
 * accomodate much larger screen resolutions.
 */
/* endif */
/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/**
 * Not a particularly great selector, but the DRYest way to do things.
 */
/* line 11, ../../sass/base/inuit.css/generic/_push.scss */
[class*="push--"] {
  position: relative;
}

/**
 * Whole
 */
/* line 18, ../../sass/base/inuit.css/generic/_push.scss */
.push--one-whole {
  left: 100%;
}

/**
 * Halves
 */
/* line 24, ../../sass/base/inuit.css/generic/_push.scss */
.push--one-half, .push--two-quarters, .push--three-sixths, .push--four-eighths, .push--five-tenths, .push--six-twelfths {
  left: 50%;
}

/**
 * Thirds
 */
/* line 30, ../../sass/base/inuit.css/generic/_push.scss */
.push--one-third, .push--two-sixths, .push--four-twelfths {
  left: 33.333%;
}

/* line 31, ../../sass/base/inuit.css/generic/_push.scss */
.push--two-thirds, .push--four-sixths, .push--eight-twelfths {
  left: 66.666%;
}

/**
 * Quarters
 */
/* line 37, ../../sass/base/inuit.css/generic/_push.scss */
.push--one-quarter, .push--two-eighths, .push--three-twelfths {
  left: 25%;
}

/* line 39, ../../sass/base/inuit.css/generic/_push.scss */
.push--three-quarters, .push--six-eighths, .push--nine-twelfths {
  left: 75%;
}

/**
 * Fifths
 */
/* line 45, ../../sass/base/inuit.css/generic/_push.scss */
.push--one-fifth, .push--two-tenths {
  left: 20%;
}

/* line 46, ../../sass/base/inuit.css/generic/_push.scss */
.push--two-fifths, .push--four-tenths {
  left: 40%;
}

/* line 47, ../../sass/base/inuit.css/generic/_push.scss */
.push--three-fifths, .push--six-tenths {
  left: 60%;
}

/* line 48, ../../sass/base/inuit.css/generic/_push.scss */
.push--four-fifths, .push--eight-tenths {
  left: 80%;
}

/**
 * Sixths
 */
/* line 54, ../../sass/base/inuit.css/generic/_push.scss */
.push--one-sixth, .push--two-twelfths {
  left: 16.666%;
}

/* line 58, ../../sass/base/inuit.css/generic/_push.scss */
.push--five-sixths, .push--ten-twelfths {
  left: 83.333%;
}

/**
 * Eighths
 */
/* line 64, ../../sass/base/inuit.css/generic/_push.scss */
.push--one-eighth {
  left: 12.5%;
}

/* line 66, ../../sass/base/inuit.css/generic/_push.scss */
.push--three-eighths {
  left: 37.5%;
}

/* line 68, ../../sass/base/inuit.css/generic/_push.scss */
.push--five-eighths {
  left: 62.5%;
}

/* line 70, ../../sass/base/inuit.css/generic/_push.scss */
.push--seven-eighths {
  left: 87.5%;
}

/**
 * Tenths
 */
/* line 76, ../../sass/base/inuit.css/generic/_push.scss */
.push--one-tenth {
  left: 10%;
}

/* line 78, ../../sass/base/inuit.css/generic/_push.scss */
.push--three-tenths {
  left: 30%;
}

/* line 82, ../../sass/base/inuit.css/generic/_push.scss */
.push--seven-tenths {
  left: 70%;
}

/* line 84, ../../sass/base/inuit.css/generic/_push.scss */
.push--nine-tenths {
  left: 90%;
}

/**
 * Twelfths
 */
/* line 90, ../../sass/base/inuit.css/generic/_push.scss */
.push--one-twelfth {
  left: 8.333%;
}

/* line 94, ../../sass/base/inuit.css/generic/_push.scss */
.push--five-twelfths {
  left: 41.666%;
}

/* line 96, ../../sass/base/inuit.css/generic/_push.scss */
.push--seven-twelfths {
  left: 58.333%;
}

/* line 100, ../../sass/base/inuit.css/generic/_push.scss */
.push--eleven-twelfths {
  left: 91.666%;
}

/* endif */
/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items over to the right by certain amounts.
 */
/**
 * Not a particularly great selector, but the DRYest way to do things.
 */
/* line 11, ../../sass/base/inuit.css/generic/_pull.scss */
[class*="pull--"] {
  position: relative;
}

/**
 * Whole
 */
/* line 18, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--one-whole {
  right: 100%;
}

/**
 * Halves
 */
/* line 24, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--one-half, .pull--two-quarters, .pull--three-sixths, .pull--four-eighths, .pull--five-tenths, .pull--six-twelfths {
  right: 50%;
}

/**
 * Thirds
 */
/* line 30, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--one-third, .pull--two-sixths, .pull--four-twelfths {
  right: 33.333%;
}

/* line 31, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--two-thirds, .pull--four-sixths, .pull--eight-twelfths {
  right: 66.666%;
}

/**
 * Quarters
 */
/* line 37, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--one-quarter, .pull--two-eighths, .pull--three-twelfths {
  right: 25%;
}

/* line 39, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--three-quarters, .pull--six-eighths, .pull--nine-twelfths {
  right: 75%;
}

/**
 * Fifths
 */
/* line 45, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--one-fifth, .pull--two-tenths {
  right: 20%;
}

/* line 46, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--two-fifths, .pull--four-tenths {
  right: 40%;
}

/* line 47, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--three-fifths, .pull--six-tenths {
  right: 60%;
}

/* line 48, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--four-fifths, .pull--eight-tenths {
  right: 80%;
}

/**
 * Sixths
 */
/* line 54, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--one-sixth, .pull--two-twelfths {
  right: 16.666%;
}

/* line 58, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--five-sixths, .pull--ten-twelfths {
  right: 83.333%;
}

/**
 * Eighths
 */
/* line 64, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--one-eighth {
  right: 12.5%;
}

/* line 66, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--three-eighths {
  right: 37.5%;
}

/* line 68, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--five-eighths {
  right: 62.5%;
}

/* line 70, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--seven-eighths {
  right: 87.5%;
}

/**
 * Tenths
 */
/* line 76, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--one-tenth {
  right: 10%;
}

/* line 78, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--three-tenths {
  right: 30%;
}

/* line 82, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--seven-tenths {
  right: 70%;
}

/* line 84, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--nine-tenths {
  right: 90%;
}

/**
 * Twelfths
 */
/* line 90, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--one-twelfth {
  right: 8.333%;
}

/* line 94, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--five-twelfths {
  right: 41.666%;
}

/* line 96, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--seven-twelfths {
  right: 58.333%;
}

/* line 100, ../../sass/base/inuit.css/generic/_pull.scss */
.pull--eleven-twelfths {
  right: 91.666%;
}

/* endif */
/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * `.brand` is a quick and simple way to apply your brand face and/or color to
 * any element using a handy helper class.
 */
/* line 8, ../../sass/base/inuit.css/generic/_brand.scss */
.brand {
  font-family: "Helvetica Neue", sans-serif!important;
  color: #4a8ec2!important;
}

/* line 12, ../../sass/base/inuit.css/generic/_brand.scss */
.brand-face {
  font-family: "Helvetica Neue", sans-serif!important;
}

/* line 16, ../../sass/base/inuit.css/generic/_brand.scss */
.brand-color,
.brand-colour {
  color: #4a8ec2!important;
}

/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/* line 13, ../../sass/base/inuit.css/generic/_helper.scss */
.float--right {
  float: right!important;
}

/* line 14, ../../sass/base/inuit.css/generic/_helper.scss */
.float--left {
  float: left !important;
}

/* line 16, ../../sass/base/inuit.css/generic/_helper.scss */
.text--left {
  text-align: left  !important;
}

/* line 17, ../../sass/base/inuit.css/generic/_helper.scss */
.text--center {
  text-align: center!important;
}

/* line 18, ../../sass/base/inuit.css/generic/_helper.scss */
.text--right {
  text-align: right !important;
}

/* line 20, ../../sass/base/inuit.css/generic/_helper.scss */
.flush {
  margin: 0!important;
}

/* line 21, ../../sass/base/inuit.css/generic/_helper.scss */
.flush--top {
  margin-top: 0!important;
}

/* line 22, ../../sass/base/inuit.css/generic/_helper.scss */
.flush--right {
  margin-right: 0!important;
}

/* line 23, ../../sass/base/inuit.css/generic/_helper.scss */
.flush--bottom {
  margin-bottom: 0!important;
}

/* line 24, ../../sass/base/inuit.css/generic/_helper.scss */
.flush--left {
  margin-left: 0!important;
}

/* line 25, ../../sass/base/inuit.css/generic/_helper.scss */
.flush--ends {
  margin-top: 0!important;
  margin-bottom: 0!important;
}

/* line 26, ../../sass/base/inuit.css/generic/_helper.scss */
.flush--sides {
  margin-right: 0!important;
  margin-left: 0!important;
}

/**
 * Pull items full width of `.island` parents.
 */
/* line 32, ../../sass/base/inuit.css/generic/_helper.scss */
.full-bleed {
  margin-right: -24px !important;
  margin-left: -24px !important;
}
/* line 36, ../../sass/base/inuit.css/generic/_helper.scss */
.islet .full-bleed {
  margin-right: -12px !important;
  margin-left: -12px !important;
}

/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
/* line 47, ../../sass/base/inuit.css/generic/_helper.scss */
.informative {
  cursor: help;
}

/**
 * Mute an object by reducing its opacity.
 */
/* line 55, ../../sass/base/inuit.css/generic/_helper.scss */
.muted {
  opacity: 0.5;
  filter: alpha(opacity=50);
}

/**
 * Align items to the right where they imply progression/movement forward, e.g.:
 * 
   <p class=proceed><a href=#>Read more...</a></p>
 * 
 */
/* line 67, ../../sass/base/inuit.css/generic/_helper.scss */
.proceed {
  text-align: right;
}

/**
 * Add a right-angled quote to links that imply movement, e.g.:
 * 
   <a href=# class=go>Read more</a>
 * 
 */
/* line 78, ../../sass/base/inuit.css/generic/_helper.scss */
.go:after {
  content: " »";
}

/**
 * Apply capital case to an element (usually a `strong`).
 */
/* line 86, ../../sass/base/inuit.css/generic/_helper.scss */
.caps {
  text-transform: uppercase;
}

/**
 * Hide content off-screen without resorting to `display:none;`
 */
/* line 94, ../../sass/base/inuit.css/generic/_helper.scss */
.accessibility {
  position: absolute;
  left: -99999px;
}

/* line 95, ../../sass/base/inuit.css/generic/_helper.scss */
[dir=rtl] .accessibility {
  left: auto;
  right: -99999px;
}

/**
 * Hide content based on breakpoint
 */
/* line 101, ../../sass/base/inuit.css/generic/_helper.scss */
.hide {
  position: absolute;
  left: -9999px;
}

@media only screen and (max-width: 480px) {
  /* line 107, ../../sass/base/inuit.css/generic/_helper.scss */
  .hide--palm {
    position: absolute;
    left: -9999px;
  }
}
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /* line 107, ../../sass/base/inuit.css/generic/_helper.scss */
  .hide--lap {
    position: absolute;
    left: -9999px;
  }
}
@media only screen and (max-width: 1023px) {
  /* line 107, ../../sass/base/inuit.css/generic/_helper.scss */
  .hide--portable {
    position: absolute;
    left: -9999px;
  }
}
@media only screen and (min-width: 1024px) {
  /* line 107, ../../sass/base/inuit.css/generic/_helper.scss */
  .hide--desk {
    position: absolute;
    left: -9999px;
  }
}
/* endif */
/**
 * She’s all yours, cap’n... Begin importing your stuff here.
 */
